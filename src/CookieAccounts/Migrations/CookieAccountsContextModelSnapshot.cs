// <auto-generated />
using System;
using CookieAccounts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CookieAccounts.Migrations
{
    [DbContext(typeof(CookieAccountsContext))]
    partial class CookieAccountsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-rc.1.22426.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CookieAccounts.Models.Db.Account", b =>
                {
                    b.Property<string>("AccountID")
                        .HasColumnType("text")
                        .HasColumnName("account_id");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.HasKey("AccountID");

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("CookieAccounts.Models.Db.Application", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("application_id");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("ApplicationId");

                    b.ToTable("applications");
                });

            modelBuilder.Entity("CookieAccounts.Models.Db.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("application_id");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start");

                    b.HasKey("EventId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("events");
                });

            modelBuilder.Entity("CookieAccounts.Models.Db.EventAccount", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<string>("AccountId")
                        .HasColumnType("text")
                        .HasColumnName("account_id");

                    b.Property<bool>("Used")
                        .HasColumnType("boolean")
                        .HasColumnName("used");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("EventId", "AccountId");

                    b.HasIndex("AccountId");

                    b.HasIndex("UserId");

                    b.ToTable("event_accounts");
                });

            modelBuilder.Entity("CookieAccounts.Models.Db.Installation", b =>
                {
                    b.Property<string>("InstallationId")
                        .HasColumnType("text")
                        .HasColumnName("installation_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("InstallationId");

                    b.HasIndex("UserId");

                    b.ToTable("installations");
                });

            modelBuilder.Entity("CookieAccounts.Models.Db.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.HasKey("UserId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("EventUser", b =>
                {
                    b.Property<Guid>("EventsEventId")
                        .HasColumnType("uuid");

                    b.Property<string>("UsersUserId")
                        .HasColumnType("text");

                    b.HasKey("EventsEventId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("EventUser");
                });

            modelBuilder.Entity("CookieAccounts.Models.Db.Event", b =>
                {
                    b.HasOne("CookieAccounts.Models.Db.Application", "Application")
                        .WithMany("Events")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("CookieAccounts.Models.Db.EventAccount", b =>
                {
                    b.HasOne("CookieAccounts.Models.Db.Account", "Account")
                        .WithMany("EventAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CookieAccounts.Models.Db.Event", "Event")
                        .WithMany("Accounts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CookieAccounts.Models.Db.User", "User")
                        .WithMany("UsedAccounts")
                        .HasForeignKey("UserId");

                    b.Navigation("Account");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CookieAccounts.Models.Db.Installation", b =>
                {
                    b.HasOne("CookieAccounts.Models.Db.User", "User")
                        .WithMany("Installations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventUser", b =>
                {
                    b.HasOne("CookieAccounts.Models.Db.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CookieAccounts.Models.Db.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CookieAccounts.Models.Db.Account", b =>
                {
                    b.Navigation("EventAccounts");
                });

            modelBuilder.Entity("CookieAccounts.Models.Db.Application", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("CookieAccounts.Models.Db.Event", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("CookieAccounts.Models.Db.User", b =>
                {
                    b.Navigation("Installations");

                    b.Navigation("UsedAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
